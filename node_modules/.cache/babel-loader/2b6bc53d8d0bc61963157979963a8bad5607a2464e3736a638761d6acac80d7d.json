{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexports.inject = function (wait) {\n  var Task = require('./task');\n  return {\n    /**\n     * Repeatedly calls the 'do' function, until its result passes the 'until'\n     * predicate, or timeout. The 'do' function is retried with exponential\n     * backoff.\n     *\n     * @param {function(): Task<T>} options.do Starts the task to try\n     *     repeatedly.\n     * @param {function(T): boolean} options.until A predicate that checks\n     *     whether the result of options.do was successful.\n     * @return {Task<T>}\n     * @template T\n     */\n    attempt: function (options) {\n      var doSomething = options['do'];\n      var isSuccessful = options.until;\n      var interval = options.interval || 500;\n      var increment = options.increment || 1.5;\n      var jitter = options.jitter || 0.5;\n      return Task.withValue().thenDo(function loop() {\n        return doSomething().thenDo(function (result) {\n          if (isSuccessful(result)) {\n            return Task.withValue(result);\n          }\n          var delay = interval * (1 + jitter * (2 * Math.random() - 1));\n          interval *= increment;\n          return wait(delay).thenDo(loop);\n        });\n      });\n    }\n  };\n};","map":{"version":3,"names":["exports","inject","wait","Task","require","attempt","options","doSomething","isSuccessful","until","interval","increment","jitter","withValue","thenDo","loop","result","delay","Math","random"],"sources":["/home/vanshgoel/Downloads/ecohealth-react/node_modules/.pnpm/@google+maps@1.1.3/node_modules/@google/maps/lib/internal/attempt.js"],"sourcesContent":["/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexports.inject = function(wait) {\n  var Task = require('./task');\n\n  return {\n    /**\n     * Repeatedly calls the 'do' function, until its result passes the 'until'\n     * predicate, or timeout. The 'do' function is retried with exponential\n     * backoff.\n     *\n     * @param {function(): Task<T>} options.do Starts the task to try\n     *     repeatedly.\n     * @param {function(T): boolean} options.until A predicate that checks\n     *     whether the result of options.do was successful.\n     * @return {Task<T>}\n     * @template T\n     */\n    attempt: function(options) {\n      var doSomething = options['do'];\n      var isSuccessful = options.until;\n      var interval = options.interval || 500;\n      var increment = options.increment || 1.5;\n      var jitter = options.jitter || 0.5;\n\n      return Task.withValue().thenDo(function loop() {\n        return doSomething().thenDo(function(result) {\n          if (isSuccessful(result)) {\n            return Task.withValue(result);\n          }\n\n          var delay = interval * (1 + jitter * (2 * Math.random() - 1));\n          interval *= increment;\n          return wait(delay).thenDo(loop);\n        });\n      });\n    }\n  };\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,OAAO,CAACC,MAAM,GAAG,UAASC,IAAI,EAAE;EAC9B,IAAIC,IAAI,GAAGC,OAAO,CAAC,QAAQ,CAAC;EAE5B,OAAO;IACL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIC,OAAO,EAAE,SAAAA,CAASC,OAAO,EAAE;MACzB,IAAIC,WAAW,GAAGD,OAAO,CAAC,IAAI,CAAC;MAC/B,IAAIE,YAAY,GAAGF,OAAO,CAACG,KAAK;MAChC,IAAIC,QAAQ,GAAGJ,OAAO,CAACI,QAAQ,IAAI,GAAG;MACtC,IAAIC,SAAS,GAAGL,OAAO,CAACK,SAAS,IAAI,GAAG;MACxC,IAAIC,MAAM,GAAGN,OAAO,CAACM,MAAM,IAAI,GAAG;MAElC,OAAOT,IAAI,CAACU,SAAS,CAAC,CAAC,CAACC,MAAM,CAAC,SAASC,IAAIA,CAAA,EAAG;QAC7C,OAAOR,WAAW,CAAC,CAAC,CAACO,MAAM,CAAC,UAASE,MAAM,EAAE;UAC3C,IAAIR,YAAY,CAACQ,MAAM,CAAC,EAAE;YACxB,OAAOb,IAAI,CAACU,SAAS,CAACG,MAAM,CAAC;UAC/B;UAEA,IAAIC,KAAK,GAAGP,QAAQ,IAAI,CAAC,GAAGE,MAAM,IAAI,CAAC,GAAGM,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;UAC7DT,QAAQ,IAAIC,SAAS;UACrB,OAAOT,IAAI,CAACe,KAAK,CAAC,CAACH,MAAM,CAACC,IAAI,CAAC;QACjC,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}