{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */;\nvar utils = require('../internal/convert');\nvar v = require('../internal/validate');\n\n/**\n * Makes a geolocation request.\n *\n * For a detailed guide, see https://developers.google.com/maps/documentation/geolocation/intro\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.geolocate\n * @function\n * @param {Object} query\n * @param {number} [query.homeMobileCountryCode]\n * @param {number} [query.homeMobileNetworkCode]\n * @param {string} [query.radioType]\n * @param {string} [query.carrier]\n * @param {boolean} [query.considerIp]\n * @param {Object[]} [query.cellTowers]\n * @param {Object[]} [query.wifiAccessPoints]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\nexports.geolocate = {\n  url: 'https://www.googleapis.com/geolocation/v1/geolocate',\n  options: {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json;'\n    },\n    canRetry: function (response) {\n      return response.status === 403;\n    },\n    isSuccessful: function (response) {\n      return response.status === 200 || response.status === 404;\n    }\n  },\n  validator: v.object({\n    homeMobileCountryCode: v.optional(v.number),\n    homeMobileNetworkCode: v.optional(v.number),\n    radioType: v.optional(v.string),\n    carrier: v.optional(v.string),\n    considerIp: v.optional(v.boolean),\n    cellTowers: v.optional(v.array(v.object({\n      cellId: v.number,\n      locationAreaCode: v.number,\n      mobileCountryCode: v.number,\n      mobileNetworkCode: v.number,\n      age: v.optional(v.number),\n      signalStrength: v.optional(v.number),\n      timingAdvance: v.optional(v.number)\n    }))),\n    wifiAccessPoints: v.optional(v.array(v.object({\n      macAddress: v.string,\n      signalStrength: v.optional(v.number),\n      age: v.optional(v.number),\n      channel: v.optional(v.number),\n      signalToNoiseRatio: v.optional(v.number)\n    }))),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};","map":{"version":3,"names":["utils","require","v","exports","geolocate","url","options","method","headers","canRetry","response","status","isSuccessful","validator","object","homeMobileCountryCode","optional","number","homeMobileNetworkCode","radioType","string","carrier","considerIp","boolean","cellTowers","array","cellId","locationAreaCode","mobileCountryCode","mobileNetworkCode","age","signalStrength","timingAdvance","wifiAccessPoints","macAddress","channel","signalToNoiseRatio","retryOptions","timeout"],"sources":["/home/vanshgoel/Downloads/ecohealth-react/node_modules/.pnpm/@google+maps@1.1.3/node_modules/@google/maps/lib/apis/geolocation.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */;\n\nvar utils = require('../internal/convert');\nvar v = require('../internal/validate');\n\n/**\n * Makes a geolocation request.\n *\n * For a detailed guide, see https://developers.google.com/maps/documentation/geolocation/intro\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.geolocate\n * @function\n * @param {Object} query\n * @param {number} [query.homeMobileCountryCode]\n * @param {number} [query.homeMobileNetworkCode]\n * @param {string} [query.radioType]\n * @param {string} [query.carrier]\n * @param {boolean} [query.considerIp]\n * @param {Object[]} [query.cellTowers]\n * @param {Object[]} [query.wifiAccessPoints]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\nexports.geolocate = {\n  url: 'https://www.googleapis.com/geolocation/v1/geolocate',\n  options: {\n    method: 'POST',\n    headers: {'content-type': 'application/json;'},\n    canRetry: function(response) {\n      return response.status === 403;\n    },\n    isSuccessful: function(response) {\n      return response.status === 200 || response.status === 404;\n    }\n  },\n  validator: v.object({\n    homeMobileCountryCode: v.optional(v.number),\n    homeMobileNetworkCode: v.optional(v.number),\n    radioType: v.optional(v.string),\n    carrier: v.optional(v.string),\n    considerIp: v.optional(v.boolean),\n    cellTowers: v.optional(v.array(v.object({\n      cellId: v.number,\n      locationAreaCode: v.number,\n      mobileCountryCode: v.number,\n      mobileNetworkCode: v.number,\n      age: v.optional(v.number),\n      signalStrength: v.optional(v.number),\n      timingAdvance: v.optional(v.number)\n    }))),\n    wifiAccessPoints: v.optional(v.array(v.object({\n      macAddress: v.string,\n      signalStrength: v.optional(v.number),\n      age: v.optional(v.number),\n      channel: v.optional(v.number),\n      signalToNoiseRatio: v.optional(v.number)\n    }))),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AAEH,IAAIA,KAAK,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAC1C,IAAIC,CAAC,GAAGD,OAAO,CAAC,sBAAsB,CAAC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAE,OAAO,CAACC,SAAS,GAAG;EAClBC,GAAG,EAAE,qDAAqD;EAC1DC,OAAO,EAAE;IACPC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAC,cAAc,EAAE;IAAmB,CAAC;IAC9CC,QAAQ,EAAE,SAAAA,CAASC,QAAQ,EAAE;MAC3B,OAAOA,QAAQ,CAACC,MAAM,KAAK,GAAG;IAChC,CAAC;IACDC,YAAY,EAAE,SAAAA,CAASF,QAAQ,EAAE;MAC/B,OAAOA,QAAQ,CAACC,MAAM,KAAK,GAAG,IAAID,QAAQ,CAACC,MAAM,KAAK,GAAG;IAC3D;EACF,CAAC;EACDE,SAAS,EAAEX,CAAC,CAACY,MAAM,CAAC;IAClBC,qBAAqB,EAAEb,CAAC,CAACc,QAAQ,CAACd,CAAC,CAACe,MAAM,CAAC;IAC3CC,qBAAqB,EAAEhB,CAAC,CAACc,QAAQ,CAACd,CAAC,CAACe,MAAM,CAAC;IAC3CE,SAAS,EAAEjB,CAAC,CAACc,QAAQ,CAACd,CAAC,CAACkB,MAAM,CAAC;IAC/BC,OAAO,EAAEnB,CAAC,CAACc,QAAQ,CAACd,CAAC,CAACkB,MAAM,CAAC;IAC7BE,UAAU,EAAEpB,CAAC,CAACc,QAAQ,CAACd,CAAC,CAACqB,OAAO,CAAC;IACjCC,UAAU,EAAEtB,CAAC,CAACc,QAAQ,CAACd,CAAC,CAACuB,KAAK,CAACvB,CAAC,CAACY,MAAM,CAAC;MACtCY,MAAM,EAAExB,CAAC,CAACe,MAAM;MAChBU,gBAAgB,EAAEzB,CAAC,CAACe,MAAM;MAC1BW,iBAAiB,EAAE1B,CAAC,CAACe,MAAM;MAC3BY,iBAAiB,EAAE3B,CAAC,CAACe,MAAM;MAC3Ba,GAAG,EAAE5B,CAAC,CAACc,QAAQ,CAACd,CAAC,CAACe,MAAM,CAAC;MACzBc,cAAc,EAAE7B,CAAC,CAACc,QAAQ,CAACd,CAAC,CAACe,MAAM,CAAC;MACpCe,aAAa,EAAE9B,CAAC,CAACc,QAAQ,CAACd,CAAC,CAACe,MAAM;IACpC,CAAC,CAAC,CAAC,CAAC;IACJgB,gBAAgB,EAAE/B,CAAC,CAACc,QAAQ,CAACd,CAAC,CAACuB,KAAK,CAACvB,CAAC,CAACY,MAAM,CAAC;MAC5CoB,UAAU,EAAEhC,CAAC,CAACkB,MAAM;MACpBW,cAAc,EAAE7B,CAAC,CAACc,QAAQ,CAACd,CAAC,CAACe,MAAM,CAAC;MACpCa,GAAG,EAAE5B,CAAC,CAACc,QAAQ,CAACd,CAAC,CAACe,MAAM,CAAC;MACzBkB,OAAO,EAAEjC,CAAC,CAACc,QAAQ,CAACd,CAAC,CAACe,MAAM,CAAC;MAC7BmB,kBAAkB,EAAElC,CAAC,CAACc,QAAQ,CAACd,CAAC,CAACe,MAAM;IACzC,CAAC,CAAC,CAAC,CAAC;IACJoB,YAAY,EAAEnC,CAAC,CAACc,QAAQ,CAAChB,KAAK,CAACqC,YAAY,CAAC;IAC5CC,OAAO,EAAEpC,CAAC,CAACc,QAAQ,CAACd,CAAC,CAACe,MAAM;EAC9B,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}