{"ast":null,"code":"\"use strict\";\n\n/* global module, require */\nmodule.exports = function () {\n  \"use strict\";\n\n  // Get a promise object. This may be native, or it may be polyfilled\n  var ES6Promise = require(\"./promise.js\");\n\n  /**\n   * thatLooksLikeAPromiseToMe()\n   *\n   * Duck-types a promise.\n   *\n   * @param {object} o\n   * @return {bool} True if this resembles a promise\n   */\n  function thatLooksLikeAPromiseToMe(o) {\n    return o && typeof o.then === \"function\" && typeof o.catch === \"function\";\n  }\n\n  /**\n   * promisify()\n   *\n   * Transforms callback-based function -- func(arg1, arg2 .. argN, callback) -- into\n   * an ES6-compatible Promise. Promisify provides a default callback of the form (error, result)\n   * and rejects when `error` is truthy. You can also supply settings object as the second argument.\n   *\n   * @param {function} original - The function to promisify\n   * @param {object} settings - Settings object\n   * @param {object} settings.thisArg - A `this` context to use. If not set, assume `settings` _is_ `thisArg`\n   * @param {bool} settings.multiArgs - Should multiple arguments be returned as an array?\n   * @return {function} A promisified version of `original`\n   */\n  return function promisify(original, settings) {\n    return function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      var returnMultipleArguments = settings && settings.multiArgs;\n      var target = void 0;\n      if (settings && settings.thisArg) {\n        target = settings.thisArg;\n      } else if (settings) {\n        target = settings;\n      }\n\n      // Return the promisified function\n      return new ES6Promise(function (resolve, reject) {\n        // Append the callback bound to the context\n        args.push(function callback(err) {\n          if (err) {\n            return reject(err);\n          }\n          for (var _len2 = arguments.length, values = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n            values[_key2 - 1] = arguments[_key2];\n          }\n          if (false === !!returnMultipleArguments) {\n            return resolve(values[0]);\n          }\n          resolve(values);\n        });\n\n        // Call the function\n        var response = original.apply(target, args);\n\n        // If it looks like original already returns a promise,\n        // then just resolve with that promise. Hopefully, the callback function we added will just be ignored.\n        if (thatLooksLikeAPromiseToMe(response)) {\n          resolve(response);\n        }\n      });\n    };\n  };\n}();","map":{"version":3,"names":["module","exports","ES6Promise","require","thatLooksLikeAPromiseToMe","o","then","catch","promisify","original","settings","_len","arguments","length","args","Array","_key","returnMultipleArguments","multiArgs","target","thisArg","resolve","reject","push","callback","err","_len2","values","_key2","response","apply"],"sources":["/home/vanshgoel/Downloads/ecohealth-react/node_modules/.pnpm/es6-promisify@5.0.0/node_modules/es6-promisify/dist/promisify.js"],"sourcesContent":["\"use strict\";\n\n/* global module, require */\nmodule.exports = function () {\n\n    \"use strict\";\n\n    // Get a promise object. This may be native, or it may be polyfilled\n\n    var ES6Promise = require(\"./promise.js\");\n\n    /**\n     * thatLooksLikeAPromiseToMe()\n     *\n     * Duck-types a promise.\n     *\n     * @param {object} o\n     * @return {bool} True if this resembles a promise\n     */\n    function thatLooksLikeAPromiseToMe(o) {\n        return o && typeof o.then === \"function\" && typeof o.catch === \"function\";\n    }\n\n    /**\n     * promisify()\n     *\n     * Transforms callback-based function -- func(arg1, arg2 .. argN, callback) -- into\n     * an ES6-compatible Promise. Promisify provides a default callback of the form (error, result)\n     * and rejects when `error` is truthy. You can also supply settings object as the second argument.\n     *\n     * @param {function} original - The function to promisify\n     * @param {object} settings - Settings object\n     * @param {object} settings.thisArg - A `this` context to use. If not set, assume `settings` _is_ `thisArg`\n     * @param {bool} settings.multiArgs - Should multiple arguments be returned as an array?\n     * @return {function} A promisified version of `original`\n     */\n    return function promisify(original, settings) {\n\n        return function () {\n            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n            }\n\n            var returnMultipleArguments = settings && settings.multiArgs;\n\n            var target = void 0;\n            if (settings && settings.thisArg) {\n                target = settings.thisArg;\n            } else if (settings) {\n                target = settings;\n            }\n\n            // Return the promisified function\n            return new ES6Promise(function (resolve, reject) {\n\n                // Append the callback bound to the context\n                args.push(function callback(err) {\n\n                    if (err) {\n                        return reject(err);\n                    }\n\n                    for (var _len2 = arguments.length, values = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n                        values[_key2 - 1] = arguments[_key2];\n                    }\n\n                    if (false === !!returnMultipleArguments) {\n                        return resolve(values[0]);\n                    }\n\n                    resolve(values);\n                });\n\n                // Call the function\n                var response = original.apply(target, args);\n\n                // If it looks like original already returns a promise,\n                // then just resolve with that promise. Hopefully, the callback function we added will just be ignored.\n                if (thatLooksLikeAPromiseToMe(response)) {\n                    resolve(response);\n                }\n            });\n        };\n    };\n}();"],"mappings":"AAAA,YAAY;;AAEZ;AACAA,MAAM,CAACC,OAAO,GAAG,YAAY;EAEzB,YAAY;;EAEZ;EAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,cAAc,CAAC;;EAExC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASC,yBAAyBA,CAACC,CAAC,EAAE;IAClC,OAAOA,CAAC,IAAI,OAAOA,CAAC,CAACC,IAAI,KAAK,UAAU,IAAI,OAAOD,CAAC,CAACE,KAAK,KAAK,UAAU;EAC7E;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAO,SAASC,SAASA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;IAE1C,OAAO,YAAY;MACf,KAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAAM,EAAEC,IAAI,GAAGC,KAAK,CAACJ,IAAI,CAAC,EAAEK,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGL,IAAI,EAAEK,IAAI,EAAE,EAAE;QACjFF,IAAI,CAACE,IAAI,CAAC,GAAGJ,SAAS,CAACI,IAAI,CAAC;MAChC;MAEA,IAAIC,uBAAuB,GAAGP,QAAQ,IAAIA,QAAQ,CAACQ,SAAS;MAE5D,IAAIC,MAAM,GAAG,KAAK,CAAC;MACnB,IAAIT,QAAQ,IAAIA,QAAQ,CAACU,OAAO,EAAE;QAC9BD,MAAM,GAAGT,QAAQ,CAACU,OAAO;MAC7B,CAAC,MAAM,IAAIV,QAAQ,EAAE;QACjBS,MAAM,GAAGT,QAAQ;MACrB;;MAEA;MACA,OAAO,IAAIR,UAAU,CAAC,UAAUmB,OAAO,EAAEC,MAAM,EAAE;QAE7C;QACAR,IAAI,CAACS,IAAI,CAAC,SAASC,QAAQA,CAACC,GAAG,EAAE;UAE7B,IAAIA,GAAG,EAAE;YACL,OAAOH,MAAM,CAACG,GAAG,CAAC;UACtB;UAEA,KAAK,IAAIC,KAAK,GAAGd,SAAS,CAACC,MAAM,EAAEc,MAAM,GAAGZ,KAAK,CAACW,KAAK,GAAG,CAAC,GAAGA,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,EAAEE,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGF,KAAK,EAAEE,KAAK,EAAE,EAAE;YAC7GD,MAAM,CAACC,KAAK,GAAG,CAAC,CAAC,GAAGhB,SAAS,CAACgB,KAAK,CAAC;UACxC;UAEA,IAAI,KAAK,KAAK,CAAC,CAACX,uBAAuB,EAAE;YACrC,OAAOI,OAAO,CAACM,MAAM,CAAC,CAAC,CAAC,CAAC;UAC7B;UAEAN,OAAO,CAACM,MAAM,CAAC;QACnB,CAAC,CAAC;;QAEF;QACA,IAAIE,QAAQ,GAAGpB,QAAQ,CAACqB,KAAK,CAACX,MAAM,EAAEL,IAAI,CAAC;;QAE3C;QACA;QACA,IAAIV,yBAAyB,CAACyB,QAAQ,CAAC,EAAE;UACrCR,OAAO,CAACQ,QAAQ,CAAC;QACrB;MACJ,CAAC,CAAC;IACN,CAAC;EACL,CAAC;AACL,CAAC,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}