{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */;\nvar utils = require('../internal/convert');\nvar v = require('../internal/validate');\n\n/**\n * Makes a snap-to-roads request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.snapToRoads\n * @function\n * @param {Object} query\n * @param {LatLng[]} query.path\n * @param {boolean} [query.interpolate]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\nexports.snapToRoads = {\n  url: 'https://roads.googleapis.com/v1/snapToRoads',\n  supportsClientId: false,\n  validator: v.object({\n    path: utils.arrayOf(utils.latLng),\n    interpolate: v.optional(v.boolean),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};\n\n/**\n * Makes a nearest roads request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.nearestRoads\n * @function\n * @param {Object} query\n * @param {LatLng[]} query.points\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\nexports.nearestRoads = {\n  url: 'https://roads.googleapis.com/v1/nearestRoads',\n  supportsClientId: false,\n  validator: v.object({\n    points: utils.arrayOf(utils.latLng),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};\n\n/**\n * Makes a speed-limits request for a place ID. For speed-limits\n * requests using a path parameter, use the snappedSpeedLimits method.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.speedLimits\n * @function\n * @param {Object} query\n * @param {string[]} query.placeId\n * @param {string} [query.units] Either 'KPH' or 'MPH'\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\nexports.speedLimits = {\n  url: 'https://roads.googleapis.com/v1/speedLimits',\n  supportsClientId: false,\n  validator: v.object({\n    placeId: v.array(v.string),\n    units: v.optional(v.oneOf(['KPH', 'MPH'])),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};\n\n/**\n * Makes a speed-limits request for a path.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.snappedSpeedLimits\n * @function\n * @param {Object} query\n * @param {LatLng[]} query.path\n * @param {string} [query.units] Either 'KPH' or 'MPH'\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\nexports.snappedSpeedLimits = {\n  url: 'https://roads.googleapis.com/v1/speedLimits',\n  supportsClientId: false,\n  validator: v.object({\n    path: utils.arrayOf(utils.latLng),\n    units: v.optional(v.oneOf(['KPH', 'MPH'])),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};","map":{"version":3,"names":["utils","require","v","exports","snapToRoads","url","supportsClientId","validator","object","path","arrayOf","latLng","interpolate","optional","boolean","retryOptions","timeout","number","nearestRoads","points","speedLimits","placeId","array","string","units","oneOf","snappedSpeedLimits"],"sources":["/home/vanshgoel/Downloads/ecohealth-react/node_modules/.pnpm/@google+maps@1.1.3/node_modules/@google/maps/lib/apis/roads.js"],"sourcesContent":["/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */;\n\nvar utils = require('../internal/convert');\nvar v = require('../internal/validate');\n\n/**\n * Makes a snap-to-roads request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.snapToRoads\n * @function\n * @param {Object} query\n * @param {LatLng[]} query.path\n * @param {boolean} [query.interpolate]\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\nexports.snapToRoads = {\n  url: 'https://roads.googleapis.com/v1/snapToRoads',\n  supportsClientId: false,\n  validator: v.object({\n    path: utils.arrayOf(utils.latLng),\n    interpolate: v.optional(v.boolean),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};\n\n/**\n * Makes a nearest roads request.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.nearestRoads\n * @function\n * @param {Object} query\n * @param {LatLng[]} query.points\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\nexports.nearestRoads = {\n  url: 'https://roads.googleapis.com/v1/nearestRoads',\n  supportsClientId: false,\n  validator: v.object({\n    points: utils.arrayOf(utils.latLng),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};\n\n/**\n * Makes a speed-limits request for a place ID. For speed-limits\n * requests using a path parameter, use the snappedSpeedLimits method.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.speedLimits\n * @function\n * @param {Object} query\n * @param {string[]} query.placeId\n * @param {string} [query.units] Either 'KPH' or 'MPH'\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\nexports.speedLimits = {\n  url: 'https://roads.googleapis.com/v1/speedLimits',\n  supportsClientId: false,\n  validator: v.object({\n    placeId: v.array(v.string),\n    units: v.optional(v.oneOf(['KPH', 'MPH'])),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};\n\n/**\n * Makes a speed-limits request for a path.\n *\n * @memberof! GoogleMapsClient\n * @name GoogleMapsClient.snappedSpeedLimits\n * @function\n * @param {Object} query\n * @param {LatLng[]} query.path\n * @param {string} [query.units] Either 'KPH' or 'MPH'\n * @param {ResponseCallback} callback Callback function for handling the result\n * @return {RequestHandle}\n */\nexports.snappedSpeedLimits = {\n  url: 'https://roads.googleapis.com/v1/speedLimits',\n  supportsClientId: false,\n  validator: v.object({\n    path: utils.arrayOf(utils.latLng),\n    units: v.optional(v.oneOf(['KPH', 'MPH'])),\n    retryOptions: v.optional(utils.retryOptions),\n    timeout: v.optional(v.number)\n  })\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AAEH,IAAIA,KAAK,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAC1C,IAAIC,CAAC,GAAGD,OAAO,CAAC,sBAAsB,CAAC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAE,OAAO,CAACC,WAAW,GAAG;EACpBC,GAAG,EAAE,6CAA6C;EAClDC,gBAAgB,EAAE,KAAK;EACvBC,SAAS,EAAEL,CAAC,CAACM,MAAM,CAAC;IAClBC,IAAI,EAAET,KAAK,CAACU,OAAO,CAACV,KAAK,CAACW,MAAM,CAAC;IACjCC,WAAW,EAAEV,CAAC,CAACW,QAAQ,CAACX,CAAC,CAACY,OAAO,CAAC;IAClCC,YAAY,EAAEb,CAAC,CAACW,QAAQ,CAACb,KAAK,CAACe,YAAY,CAAC;IAC5CC,OAAO,EAAEd,CAAC,CAACW,QAAQ,CAACX,CAAC,CAACe,MAAM;EAC9B,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAd,OAAO,CAACe,YAAY,GAAG;EACrBb,GAAG,EAAE,8CAA8C;EACnDC,gBAAgB,EAAE,KAAK;EACvBC,SAAS,EAAEL,CAAC,CAACM,MAAM,CAAC;IAClBW,MAAM,EAAEnB,KAAK,CAACU,OAAO,CAACV,KAAK,CAACW,MAAM,CAAC;IACnCI,YAAY,EAAEb,CAAC,CAACW,QAAQ,CAACb,KAAK,CAACe,YAAY,CAAC;IAC5CC,OAAO,EAAEd,CAAC,CAACW,QAAQ,CAACX,CAAC,CAACe,MAAM;EAC9B,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAd,OAAO,CAACiB,WAAW,GAAG;EACpBf,GAAG,EAAE,6CAA6C;EAClDC,gBAAgB,EAAE,KAAK;EACvBC,SAAS,EAAEL,CAAC,CAACM,MAAM,CAAC;IAClBa,OAAO,EAAEnB,CAAC,CAACoB,KAAK,CAACpB,CAAC,CAACqB,MAAM,CAAC;IAC1BC,KAAK,EAAEtB,CAAC,CAACW,QAAQ,CAACX,CAAC,CAACuB,KAAK,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;IAC1CV,YAAY,EAAEb,CAAC,CAACW,QAAQ,CAACb,KAAK,CAACe,YAAY,CAAC;IAC5CC,OAAO,EAAEd,CAAC,CAACW,QAAQ,CAACX,CAAC,CAACe,MAAM;EAC9B,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAd,OAAO,CAACuB,kBAAkB,GAAG;EAC3BrB,GAAG,EAAE,6CAA6C;EAClDC,gBAAgB,EAAE,KAAK;EACvBC,SAAS,EAAEL,CAAC,CAACM,MAAM,CAAC;IAClBC,IAAI,EAAET,KAAK,CAACU,OAAO,CAACV,KAAK,CAACW,MAAM,CAAC;IACjCa,KAAK,EAAEtB,CAAC,CAACW,QAAQ,CAACX,CAAC,CAACuB,KAAK,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;IAC1CV,YAAY,EAAEb,CAAC,CAACW,QAAQ,CAACb,KAAK,CAACe,YAAY,CAAC;IAC5CC,OAAO,EAAEd,CAAC,CAACW,QAAQ,CAACX,CAAC,CAACe,MAAM;EAC9B,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}