{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Google Maps Service module.\n * @module @google/maps\n */\n\n/**\n * Creates a Google Maps client. The client object contains all the API methods.\n *\n * @param {Object} options\n * @param {string} options.key API key (required, unless clientID and\n *     clientSecret provided).\n * @param {string=} options.clientId Maps API for Work client ID.\n * @param {string=} options.clientSecret Maps API for Work client secret (a.k.a.\n *     private key).\n * @param {string=} options.channel Maps API for Work channel.\n * @param {number=} options.timeout Timeout in milliseconds.\n *     (Default: 60 * 1000 ms)\n * @param {string=} options.language Default language for all queries.\n        See https://developers.google.com/maps/faq#languagesupport\n * @param {number=} options.rate.limit Controls rate-limiting of requests.\n *     Maximum number of requests per period. (Default: 50)\n * @param {number=} options.rate.period Period for rate limit, in milliseconds.\n *     (Default: 1000 ms)\n * @param {number=} options.retryOptions.interval If a transient server error\n *     occurs, how long to wait before retrying the request, in milliseconds.\n *     (Default: 500 ms)\n * @param {Function=} options.Promise - Promise constructor (optional).\n * @return {GoogleMapsClient} The client object containing all API methods.\n */\nexports.createClient = function (options) {\n  options = options || {};\n  if (options.experienceId && typeof options.experienceId === \"string\") {\n    options.experienceId = [options.experienceId];\n  }\n  var makeApiCall = require(\"./internal/make-api-call\").inject(options);\n  var deprecate = require(\"util\").deprecate;\n  var makeApiMethod = function (apiConfig) {\n    return function (query, callback, customParams) {\n      query = apiConfig.validator(query);\n      query.supportsClientId = apiConfig.supportsClientId !== false;\n      query.options = apiConfig.options;\n      if (options.language && !query.language) {\n        query.language = options.language;\n      }\n      // Merge query and customParams.\n      var finalQuery = {};\n      customParams = customParams || {};\n      [query, customParams].map(function (obj) {\n        Object.keys(obj).sort().map(function (key) {\n          finalQuery[key] = obj[key];\n        });\n      });\n      return makeApiCall(apiConfig.url, finalQuery, callback);\n    };\n  };\n  var geocode = require(\"./apis/geocode\");\n  var geolocation = require(\"./apis/geolocation\");\n  var timezone = require(\"./apis/timezone\");\n  var directions = require(\"./apis/directions\");\n  var distanceMatrix = require(\"./apis/distance-matrix\");\n  var elevation = require(\"./apis/elevation\");\n  var roads = require(\"./apis/roads\");\n  var places = require(\"./apis/places\");\n  return {\n    directions: makeApiMethod(directions.directions),\n    distanceMatrix: makeApiMethod(distanceMatrix.distanceMatrix),\n    elevation: makeApiMethod(elevation.elevation),\n    elevationAlongPath: makeApiMethod(elevation.elevationAlongPath),\n    geocode: makeApiMethod(geocode.geocode),\n    geolocate: makeApiMethod(geolocation.geolocate),\n    reverseGeocode: makeApiMethod(geocode.reverseGeocode),\n    findPlace: makeApiMethod(places.findPlace),\n    places: makeApiMethod(places.places),\n    placesNearby: makeApiMethod(places.placesNearby),\n    place: makeApiMethod(places.place),\n    placesPhoto: makeApiMethod(places.placesPhoto),\n    placesAutoComplete: makeApiMethod(places.placesAutoComplete),\n    placesQueryAutoComplete: makeApiMethod(places.placesQueryAutoComplete),\n    snapToRoads: makeApiMethod(roads.snapToRoads),\n    nearestRoads: makeApiMethod(roads.nearestRoads),\n    speedLimits: makeApiMethod(roads.speedLimits),\n    snappedSpeedLimits: makeApiMethod(roads.snappedSpeedLimits),\n    timezone: makeApiMethod(timezone.timezone),\n    setExperienceId: (...ids) => {\n      if (typeof ids === \"string\") {\n        ids = [ids];\n      }\n      options.experienceId = ids;\n    },\n    getExperienceId: _ => options.experienceId,\n    clearExperienceId: _ => {\n      options.experienceId = null;\n    }\n  };\n};\nexports.cli = require(\"./internal/cli\");\nexports.util = require(\"./util\");","map":{"version":3,"names":["exports","createClient","options","experienceId","makeApiCall","require","inject","deprecate","makeApiMethod","apiConfig","query","callback","customParams","validator","supportsClientId","language","finalQuery","map","obj","Object","keys","sort","key","url","geocode","geolocation","timezone","directions","distanceMatrix","elevation","roads","places","elevationAlongPath","geolocate","reverseGeocode","findPlace","placesNearby","place","placesPhoto","placesAutoComplete","placesQueryAutoComplete","snapToRoads","nearestRoads","speedLimits","snappedSpeedLimits","setExperienceId","ids","getExperienceId","_","clearExperienceId","cli","util"],"sources":["/home/vanshgoel/Downloads/ecohealth-react/node_modules/.pnpm/@google+maps@1.1.3/node_modules/@google/maps/lib/index.js"],"sourcesContent":["/**\n * @license\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Google Maps Service module.\n * @module @google/maps\n */\n\n/**\n * Creates a Google Maps client. The client object contains all the API methods.\n *\n * @param {Object} options\n * @param {string} options.key API key (required, unless clientID and\n *     clientSecret provided).\n * @param {string=} options.clientId Maps API for Work client ID.\n * @param {string=} options.clientSecret Maps API for Work client secret (a.k.a.\n *     private key).\n * @param {string=} options.channel Maps API for Work channel.\n * @param {number=} options.timeout Timeout in milliseconds.\n *     (Default: 60 * 1000 ms)\n * @param {string=} options.language Default language for all queries.\n        See https://developers.google.com/maps/faq#languagesupport\n * @param {number=} options.rate.limit Controls rate-limiting of requests.\n *     Maximum number of requests per period. (Default: 50)\n * @param {number=} options.rate.period Period for rate limit, in milliseconds.\n *     (Default: 1000 ms)\n * @param {number=} options.retryOptions.interval If a transient server error\n *     occurs, how long to wait before retrying the request, in milliseconds.\n *     (Default: 500 ms)\n * @param {Function=} options.Promise - Promise constructor (optional).\n * @return {GoogleMapsClient} The client object containing all API methods.\n */\nexports.createClient = function(options) {\n  options = options || {};\n\n  if (options.experienceId && typeof options.experienceId === \"string\") {\n    options.experienceId = [options.experienceId];\n  }\n\n  var makeApiCall = require(\"./internal/make-api-call\").inject(options);\n  var deprecate = require(\"util\").deprecate;\n\n  var makeApiMethod = function(apiConfig) {\n    return function(query, callback, customParams) {\n      query = apiConfig.validator(query);\n      query.supportsClientId = apiConfig.supportsClientId !== false;\n      query.options = apiConfig.options;\n      if (options.language && !query.language) {\n        query.language = options.language;\n      }\n      // Merge query and customParams.\n      var finalQuery = {};\n      customParams = customParams || {};\n      [query, customParams].map(function(obj) {\n        Object.keys(obj)\n          .sort()\n          .map(function(key) {\n            finalQuery[key] = obj[key];\n          });\n      });\n      return makeApiCall(apiConfig.url, finalQuery, callback);\n    };\n  };\n\n  var geocode = require(\"./apis/geocode\");\n  var geolocation = require(\"./apis/geolocation\");\n  var timezone = require(\"./apis/timezone\");\n  var directions = require(\"./apis/directions\");\n  var distanceMatrix = require(\"./apis/distance-matrix\");\n  var elevation = require(\"./apis/elevation\");\n  var roads = require(\"./apis/roads\");\n  var places = require(\"./apis/places\");\n\n  return {\n    directions: makeApiMethod(directions.directions),\n    distanceMatrix: makeApiMethod(distanceMatrix.distanceMatrix),\n    elevation: makeApiMethod(elevation.elevation),\n    elevationAlongPath: makeApiMethod(elevation.elevationAlongPath),\n    geocode: makeApiMethod(geocode.geocode),\n    geolocate: makeApiMethod(geolocation.geolocate),\n    reverseGeocode: makeApiMethod(geocode.reverseGeocode),\n    findPlace: makeApiMethod(places.findPlace),\n    places: makeApiMethod(places.places),\n    placesNearby: makeApiMethod(places.placesNearby),\n    place: makeApiMethod(places.place),\n    placesPhoto: makeApiMethod(places.placesPhoto),\n    placesAutoComplete: makeApiMethod(places.placesAutoComplete),\n    placesQueryAutoComplete: makeApiMethod(places.placesQueryAutoComplete),\n    snapToRoads: makeApiMethod(roads.snapToRoads),\n    nearestRoads: makeApiMethod(roads.nearestRoads),\n    speedLimits: makeApiMethod(roads.speedLimits),\n    snappedSpeedLimits: makeApiMethod(roads.snappedSpeedLimits),\n    timezone: makeApiMethod(timezone.timezone),\n    setExperienceId: (...ids) => {\n      if (typeof ids === \"string\") {\n        ids = [ids];\n      }\n      options.experienceId = ids;\n    },\n    getExperienceId: _ => options.experienceId,\n    clearExperienceId: _ => {\n      options.experienceId = null;\n    }\n  };\n};\n\nexports.cli = require(\"./internal/cli\");\nexports.util = require(\"./util\");\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,OAAO,CAACC,YAAY,GAAG,UAASC,OAAO,EAAE;EACvCA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EAEvB,IAAIA,OAAO,CAACC,YAAY,IAAI,OAAOD,OAAO,CAACC,YAAY,KAAK,QAAQ,EAAE;IACpED,OAAO,CAACC,YAAY,GAAG,CAACD,OAAO,CAACC,YAAY,CAAC;EAC/C;EAEA,IAAIC,WAAW,GAAGC,OAAO,CAAC,0BAA0B,CAAC,CAACC,MAAM,CAACJ,OAAO,CAAC;EACrE,IAAIK,SAAS,GAAGF,OAAO,CAAC,MAAM,CAAC,CAACE,SAAS;EAEzC,IAAIC,aAAa,GAAG,SAAAA,CAASC,SAAS,EAAE;IACtC,OAAO,UAASC,KAAK,EAAEC,QAAQ,EAAEC,YAAY,EAAE;MAC7CF,KAAK,GAAGD,SAAS,CAACI,SAAS,CAACH,KAAK,CAAC;MAClCA,KAAK,CAACI,gBAAgB,GAAGL,SAAS,CAACK,gBAAgB,KAAK,KAAK;MAC7DJ,KAAK,CAACR,OAAO,GAAGO,SAAS,CAACP,OAAO;MACjC,IAAIA,OAAO,CAACa,QAAQ,IAAI,CAACL,KAAK,CAACK,QAAQ,EAAE;QACvCL,KAAK,CAACK,QAAQ,GAAGb,OAAO,CAACa,QAAQ;MACnC;MACA;MACA,IAAIC,UAAU,GAAG,CAAC,CAAC;MACnBJ,YAAY,GAAGA,YAAY,IAAI,CAAC,CAAC;MACjC,CAACF,KAAK,EAAEE,YAAY,CAAC,CAACK,GAAG,CAAC,UAASC,GAAG,EAAE;QACtCC,MAAM,CAACC,IAAI,CAACF,GAAG,CAAC,CACbG,IAAI,CAAC,CAAC,CACNJ,GAAG,CAAC,UAASK,GAAG,EAAE;UACjBN,UAAU,CAACM,GAAG,CAAC,GAAGJ,GAAG,CAACI,GAAG,CAAC;QAC5B,CAAC,CAAC;MACN,CAAC,CAAC;MACF,OAAOlB,WAAW,CAACK,SAAS,CAACc,GAAG,EAAEP,UAAU,EAAEL,QAAQ,CAAC;IACzD,CAAC;EACH,CAAC;EAED,IAAIa,OAAO,GAAGnB,OAAO,CAAC,gBAAgB,CAAC;EACvC,IAAIoB,WAAW,GAAGpB,OAAO,CAAC,oBAAoB,CAAC;EAC/C,IAAIqB,QAAQ,GAAGrB,OAAO,CAAC,iBAAiB,CAAC;EACzC,IAAIsB,UAAU,GAAGtB,OAAO,CAAC,mBAAmB,CAAC;EAC7C,IAAIuB,cAAc,GAAGvB,OAAO,CAAC,wBAAwB,CAAC;EACtD,IAAIwB,SAAS,GAAGxB,OAAO,CAAC,kBAAkB,CAAC;EAC3C,IAAIyB,KAAK,GAAGzB,OAAO,CAAC,cAAc,CAAC;EACnC,IAAI0B,MAAM,GAAG1B,OAAO,CAAC,eAAe,CAAC;EAErC,OAAO;IACLsB,UAAU,EAAEnB,aAAa,CAACmB,UAAU,CAACA,UAAU,CAAC;IAChDC,cAAc,EAAEpB,aAAa,CAACoB,cAAc,CAACA,cAAc,CAAC;IAC5DC,SAAS,EAAErB,aAAa,CAACqB,SAAS,CAACA,SAAS,CAAC;IAC7CG,kBAAkB,EAAExB,aAAa,CAACqB,SAAS,CAACG,kBAAkB,CAAC;IAC/DR,OAAO,EAAEhB,aAAa,CAACgB,OAAO,CAACA,OAAO,CAAC;IACvCS,SAAS,EAAEzB,aAAa,CAACiB,WAAW,CAACQ,SAAS,CAAC;IAC/CC,cAAc,EAAE1B,aAAa,CAACgB,OAAO,CAACU,cAAc,CAAC;IACrDC,SAAS,EAAE3B,aAAa,CAACuB,MAAM,CAACI,SAAS,CAAC;IAC1CJ,MAAM,EAAEvB,aAAa,CAACuB,MAAM,CAACA,MAAM,CAAC;IACpCK,YAAY,EAAE5B,aAAa,CAACuB,MAAM,CAACK,YAAY,CAAC;IAChDC,KAAK,EAAE7B,aAAa,CAACuB,MAAM,CAACM,KAAK,CAAC;IAClCC,WAAW,EAAE9B,aAAa,CAACuB,MAAM,CAACO,WAAW,CAAC;IAC9CC,kBAAkB,EAAE/B,aAAa,CAACuB,MAAM,CAACQ,kBAAkB,CAAC;IAC5DC,uBAAuB,EAAEhC,aAAa,CAACuB,MAAM,CAACS,uBAAuB,CAAC;IACtEC,WAAW,EAAEjC,aAAa,CAACsB,KAAK,CAACW,WAAW,CAAC;IAC7CC,YAAY,EAAElC,aAAa,CAACsB,KAAK,CAACY,YAAY,CAAC;IAC/CC,WAAW,EAAEnC,aAAa,CAACsB,KAAK,CAACa,WAAW,CAAC;IAC7CC,kBAAkB,EAAEpC,aAAa,CAACsB,KAAK,CAACc,kBAAkB,CAAC;IAC3DlB,QAAQ,EAAElB,aAAa,CAACkB,QAAQ,CAACA,QAAQ,CAAC;IAC1CmB,eAAe,EAAEA,CAAC,GAAGC,GAAG,KAAK;MAC3B,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;QAC3BA,GAAG,GAAG,CAACA,GAAG,CAAC;MACb;MACA5C,OAAO,CAACC,YAAY,GAAG2C,GAAG;IAC5B,CAAC;IACDC,eAAe,EAAEC,CAAC,IAAI9C,OAAO,CAACC,YAAY;IAC1C8C,iBAAiB,EAAED,CAAC,IAAI;MACtB9C,OAAO,CAACC,YAAY,GAAG,IAAI;IAC7B;EACF,CAAC;AACH,CAAC;AAEDH,OAAO,CAACkD,GAAG,GAAG7C,OAAO,CAAC,gBAAgB,CAAC;AACvCL,OAAO,CAACmD,IAAI,GAAG9C,OAAO,CAAC,QAAQ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}