{"ast":null,"code":"\"use strict\";\n\n/* global self, window, module, global, require */\nmodule.exports = function () {\n  \"use strict\";\n\n  var globalObject = void 0;\n  function isFunction(x) {\n    return typeof x === \"function\";\n  }\n\n  // Seek the global object\n  if (global !== undefined) {\n    globalObject = global;\n  } else if (window !== undefined && window.document) {\n    globalObject = window;\n  } else {\n    globalObject = self;\n  }\n\n  // Test for any native promise implementation, and if that\n  // implementation appears to conform to the specificaton.\n  // This code mostly nicked from the es6-promise module polyfill\n  // and then fooled with.\n  var hasPromiseSupport = function () {\n    // No promise object at all, and it's a non-starter\n    if (!globalObject.hasOwnProperty(\"Promise\")) {\n      return false;\n    }\n\n    // There is a Promise object. Does it conform to the spec?\n    var P = globalObject.Promise;\n\n    // Some of these methods are missing from\n    // Firefox/Chrome experimental implementations\n    if (!P.hasOwnProperty(\"resolve\") || !P.hasOwnProperty(\"reject\")) {\n      return false;\n    }\n    if (!P.hasOwnProperty(\"all\") || !P.hasOwnProperty(\"race\")) {\n      return false;\n    }\n\n    // Older version of the spec had a resolver object\n    // as the arg rather than a function\n    return function () {\n      var resolve = void 0;\n      var p = new globalObject.Promise(function (r) {\n        resolve = r;\n      });\n      if (p) {\n        return isFunction(resolve);\n      }\n      return false;\n    }();\n  }();\n\n  // Export the native Promise implementation if it\n  // looks like it matches the spec\n  if (hasPromiseSupport) {\n    return globalObject.Promise;\n  }\n\n  //  Otherwise, return the es6-promise polyfill by @jaffathecake.\n  return require(\"es6-promise\").Promise;\n}();","map":{"version":3,"names":["module","exports","globalObject","isFunction","x","global","undefined","window","document","self","hasPromiseSupport","hasOwnProperty","P","Promise","resolve","p","r","require"],"sources":["/home/vanshgoel/Downloads/ecohealth-react/node_modules/.pnpm/es6-promisify@5.0.0/node_modules/es6-promisify/dist/promise.js"],"sourcesContent":["\"use strict\";\n\n/* global self, window, module, global, require */\nmodule.exports = function () {\n\n    \"use strict\";\n\n    var globalObject = void 0;\n\n    function isFunction(x) {\n        return typeof x === \"function\";\n    }\n\n    // Seek the global object\n    if (global !== undefined) {\n        globalObject = global;\n    } else if (window !== undefined && window.document) {\n        globalObject = window;\n    } else {\n        globalObject = self;\n    }\n\n    // Test for any native promise implementation, and if that\n    // implementation appears to conform to the specificaton.\n    // This code mostly nicked from the es6-promise module polyfill\n    // and then fooled with.\n    var hasPromiseSupport = function () {\n\n        // No promise object at all, and it's a non-starter\n        if (!globalObject.hasOwnProperty(\"Promise\")) {\n            return false;\n        }\n\n        // There is a Promise object. Does it conform to the spec?\n        var P = globalObject.Promise;\n\n        // Some of these methods are missing from\n        // Firefox/Chrome experimental implementations\n        if (!P.hasOwnProperty(\"resolve\") || !P.hasOwnProperty(\"reject\")) {\n            return false;\n        }\n\n        if (!P.hasOwnProperty(\"all\") || !P.hasOwnProperty(\"race\")) {\n            return false;\n        }\n\n        // Older version of the spec had a resolver object\n        // as the arg rather than a function\n        return function () {\n\n            var resolve = void 0;\n\n            var p = new globalObject.Promise(function (r) {\n                resolve = r;\n            });\n\n            if (p) {\n                return isFunction(resolve);\n            }\n\n            return false;\n        }();\n    }();\n\n    // Export the native Promise implementation if it\n    // looks like it matches the spec\n    if (hasPromiseSupport) {\n        return globalObject.Promise;\n    }\n\n    //  Otherwise, return the es6-promise polyfill by @jaffathecake.\n    return require(\"es6-promise\").Promise;\n}();"],"mappings":"AAAA,YAAY;;AAEZ;AACAA,MAAM,CAACC,OAAO,GAAG,YAAY;EAEzB,YAAY;;EAEZ,IAAIC,YAAY,GAAG,KAAK,CAAC;EAEzB,SAASC,UAAUA,CAACC,CAAC,EAAE;IACnB,OAAO,OAAOA,CAAC,KAAK,UAAU;EAClC;;EAEA;EACA,IAAIC,MAAM,KAAKC,SAAS,EAAE;IACtBJ,YAAY,GAAGG,MAAM;EACzB,CAAC,MAAM,IAAIE,MAAM,KAAKD,SAAS,IAAIC,MAAM,CAACC,QAAQ,EAAE;IAChDN,YAAY,GAAGK,MAAM;EACzB,CAAC,MAAM;IACHL,YAAY,GAAGO,IAAI;EACvB;;EAEA;EACA;EACA;EACA;EACA,IAAIC,iBAAiB,GAAG,YAAY;IAEhC;IACA,IAAI,CAACR,YAAY,CAACS,cAAc,CAAC,SAAS,CAAC,EAAE;MACzC,OAAO,KAAK;IAChB;;IAEA;IACA,IAAIC,CAAC,GAAGV,YAAY,CAACW,OAAO;;IAE5B;IACA;IACA,IAAI,CAACD,CAAC,CAACD,cAAc,CAAC,SAAS,CAAC,IAAI,CAACC,CAAC,CAACD,cAAc,CAAC,QAAQ,CAAC,EAAE;MAC7D,OAAO,KAAK;IAChB;IAEA,IAAI,CAACC,CAAC,CAACD,cAAc,CAAC,KAAK,CAAC,IAAI,CAACC,CAAC,CAACD,cAAc,CAAC,MAAM,CAAC,EAAE;MACvD,OAAO,KAAK;IAChB;;IAEA;IACA;IACA,OAAO,YAAY;MAEf,IAAIG,OAAO,GAAG,KAAK,CAAC;MAEpB,IAAIC,CAAC,GAAG,IAAIb,YAAY,CAACW,OAAO,CAAC,UAAUG,CAAC,EAAE;QAC1CF,OAAO,GAAGE,CAAC;MACf,CAAC,CAAC;MAEF,IAAID,CAAC,EAAE;QACH,OAAOZ,UAAU,CAACW,OAAO,CAAC;MAC9B;MAEA,OAAO,KAAK;IAChB,CAAC,CAAC,CAAC;EACP,CAAC,CAAC,CAAC;;EAEH;EACA;EACA,IAAIJ,iBAAiB,EAAE;IACnB,OAAOR,YAAY,CAACW,OAAO;EAC/B;;EAEA;EACA,OAAOI,OAAO,CAAC,aAAa,CAAC,CAACJ,OAAO;AACzC,CAAC,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}